{"version":3,"sources":["assets/eos.png","assets/logo.png","config/default.js","services/scatter.js","services/ipfsUrl.js","services/ipfs.js","pages/photoCropper.jsx","pages/photoModal.jsx","pages/home.jsx","index.js"],"names":["module","exports","__webpack_require__","p","network","blockchain","protocol","host","port","chainId","contract","window","location","hostname","ipfs","ScatterJS","plugins","ScatterEOS","config","services_scatter","connect","transactionCall","scatter","then","connected","requiredFields","accounts","getIdentity","account","identity","find","x","eos","Eos","expireInSeconds","authorization","concat","name","authority","catch","error","console","forget","forgetIdentity","ipfsUrl","hash","eos_image","bufferFrom","require","IpfsApi","fileReader","FileReader","services_ipfs","af","ipfsCall","readAsArrayBuffer","addEventListener","e","buffer","srcElement","result","files","add","err","PhotoCropper","state","src","finalImage","crop","y","aspect","width","finalizePhoto","_this","props","onSelectFile","setState","preview","onImageLoaded","_callee","image","pixelCrop","regenerator_default","a","wrap","_context","prev","next","getCroppedImg","sent","stop","this","onCropComplete","_callee2","_context2","onCropChange","fileName","canvas","document","createElement","height","getContext","drawImage","Promise","resolve","reject","toBlob","file","react_default","es","onDrop","accept","style","padding","textAlign","border","cursor","ReactCrop_default","onComplete","onChange","Button","color","onClick","disabled","fluid","Component","Photo","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","modalOpen","isLoading","uploadedHash","failResources","launchModal","closeModal","preventDefault","resetUploadedHash","photo","log","confirmPhoto","_this$props","set","photo_hash","res","broadcast","setPhoto","alert","whatToRender","_this$state","react_spinners","sizeUnit","size","loading","className","Label","basic","pointing","href","target","rel","alt","display","photoCropper","bind","assertThisInitialized","Modal","open","onClose","closeOnDimmerClick","Content","Index","linkScatter","forgetScatter","encodedName","modules","format","encodeName","toString","getTableRows","json","code","scope","table","lower_bound","rows","account_name","_this$state2","Card","Header","photoModal","Image","Description","renderMain","extra","Icon","ReactDOM","render","logo","home","getElementById"],"mappings":"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","file":"static/js/main.63878355.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eos.030ab9a6.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.65b8f33e.png\";","let network = {\n    \"blockchain\": \"eos\",\n    \"protocol\": \"https\",\n    \"host\": \"nodes.get-scatter.com\",\n    \"port\": 443,\n    \"chainId\": \"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906\",\n    \"contract\": \"accountphoto\"\n}\n\nlet ipfs = {\n    \"host\": \"ipfs.infura.io\",\n    \"port\": 5001,\n}\n\n// use the dev endpoint (and vars) if \"localhost\" appears in hostname\nif (window.location.hostname === \"localhost\") {\n    network = {\n        \"blockchain\": \"eos\",\n        \"protocol\": \"https\",\n        \"host\": \"kylin.eoscanada.com\",\n        \"port\": 443,\n        \"chainId\": \"5fff1dae8dc8e2fc4d5b23b2c7665c97f9e9d8edf2b6485a86ba311c25639191\",\n        \"contract\": \"zachtestnets\"\n    }\n}\n\nmodule.exports = {\n    network,\n    ipfs\n}","import Eos from \"eosjs\"; // https://github.com/EOSIO/eosjs\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs\";\nimport config from \"../config/default\";\n\nScatterJS.plugins(new ScatterEOS());\nconst { network } = config;\n\n// `transactionCall` is a function callback.\nexport default {\n  connect: transactionCall => {\n    // First we need to connect to the user's Scatter.\n    ScatterJS.scatter.connect(\"AccountPhoto\").then(connected => {\n      // If the user does not have Scatter or it is Locked or Closed this will return false;\n      if (!connected) return false;\n\n      const scatter = ScatterJS.scatter;\n\n      // Now we need to get an identity from the user.\n      // We're also going to require an account that is connected to the network we're using.\n      const requiredFields = { accounts: [network] };\n      scatter\n        .getIdentity(requiredFields)\n        .then(() => {\n          // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n          // the user for their account name beforehand. They could still give you a different account.\n          const account = scatter.identity.accounts.find(\n            x => x.blockchain === \"eos\"\n          );\n\n          // You can pass in any additional options you want into the eosjs reference.\n          const eosOptions = { expireInSeconds: 60 };\n\n          // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n          const eos = scatter.eos(network, Eos, eosOptions);\n\n          // ----------------------------\n          // Now that we have an identity,\n          // an EOSIO account, and a reference\n          // to an eosjs object we can send a transaction.\n          // ----------------------------\n\n          // Never assume the account's permission/authority. Always take it from the returned account.\n          const authorization = [`${account.name}@${account.authority}`];\n\n          /*\n                eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(trx => {\n                    // That's it!\n                    console.log(`Transaction ID: ${trx.transaction_id}`);\n                }).catch(error => {\n                    console.error(error);\n                });\n                */\n          transactionCall(eos, account, authorization);\n        })\n        .catch(error => {\n          // The user rejected this request, or doesn't have the appropriate requirements.\n          console.error(error);\n        });\n    });\n  },\n\n  forget: () => {\n    ScatterJS.scatter.forgetIdentity();\n  }\n};\n","import eos_image from '../assets/eos.png'\n\nexport default (hash) => {\n    // returns a url of a ipfs hash.\n    if(hash) return `https://ipfs.io/ipfs/${hash}`\n    return eos_image\n}","import config from \"../config/default\";\nconst bufferFrom = require('buffer-from')\n\nconst ipfs = window.IpfsApi(config.ipfs.host, config.ipfs.port, { protocol: 'https' })\nconst fileReader = new FileReader();\n\nexport default (af, ipfsCall) => {\n    fileReader.readAsArrayBuffer(af)\n    fileReader.addEventListener(\"loadend\", (e) => {\n\n        var buffer = e.srcElement.result; //arraybuffer object\n        ipfs.files.add(bufferFrom(buffer), (err, files) => {\n            // return err, the first file, and all files.\n            ipfsCall(err, files[0], files)\n        })\n    });\n}","import React, { Component } from 'react';\nimport ReactCrop from \"react-image-crop\";\nimport Dropzone from 'react-dropzone'\nimport { Button } from 'semantic-ui-react'\n\nimport \"react-image-crop/dist/ReactCrop.css\";\n\n\nclass PhotoCropper extends Component {\n  state = {\n    src: '',\n    finalImage: '',\n    crop: {\n      x: 10,\n      y: 10,\n      aspect: 1,\n      width: 40,\n    }\n  };\n\n  finalizePhoto = () => {\n    // call parent finalizePhoto method.\n    this.props.finalizePhoto(this.state.finalImage)\n  }\n\n  onSelectFile = (e) => {\n    e = e[0] // grab + save first image..  \n    this.setState({src: e.preview})\n  };\n\n  onImageLoaded = async (image, pixelCrop) => {\n    this.setState({ image });\n    if (pixelCrop) {\n      const finalImage = await this.getCroppedImg(\n        image,\n        pixelCrop,\n        \"newFile.jpeg\"\n      );\n      this.setState({ finalImage });\n    }\n  };\n\n  onCropComplete = async (crop, pixelCrop) => {\n    const finalImage = await this.getCroppedImg(\n      this.state.image,\n      pixelCrop,\n      \"newFile.jpeg\"\n    );\n    this.setState({ finalImage });\n  };\n\n  onCropChange = crop => {\n    this.setState({ crop });\n  };\n\n  getCroppedImg(image, pixelCrop, fileName) {\n    // don't crop image, unless it's available.\n    if(!image || !pixelCrop || !fileName) return\n\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = pixelCrop.width;\n    canvas.height = pixelCrop.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(\n      image,\n      pixelCrop.x,\n      pixelCrop.y,\n      pixelCrop.width,\n      pixelCrop.height,\n      0,\n      0,\n      pixelCrop.width,\n      pixelCrop.height\n    );\n\n    // As a blob\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(file => {\n        if(file) file.name = fileName;\n        resolve(file);\n      }, \"image/jpeg\");\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {!this.state.src && (<Dropzone \n            onDrop={this.onSelectFile}\n            accept=\"image/jpeg, image/jpg, image/png\"\n            style={{\n              padding: '1em',\n              textAlign: 'center',\n              border: '3px dashed #ddd',\n              height: '200px',\n              cursor: 'pointer'\n            }}>\n            Drop your photo here, or tap to select.\n          </Dropzone>)}\n        </div>\n        {this.state.src && (\n        <div>\n          <ReactCrop\n            src={this.state.src}\n            crop={this.state.crop}\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n          />\n            <Button \n                color='green' \n                onClick={this.finalizePhoto} \n                disabled={!this.state.crop.width} \n                fluid\n            >Crop Photo</Button>\n        </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PhotoCropper;","import React, { Component } from 'react';\nimport { Modal, Button, Label } from 'semantic-ui-react'\nimport ipfs from '../services/ipfs'\nimport ipfsUrl from '../services/ipfsUrl'\nimport { CircleLoader } from 'react-spinners';\n\n// photo cropping tool...\nimport PhotoCropper from './photoCropper'\n\n// Index component\nclass Photo extends Component {\n\n  state = {\n    modalOpen: false,\n    isLoading: false,\n    uploadedHash: '',    // ipfs hash\n    failResources: false\n  }\n\n  constructor(props) {\n    super(props)\n    this.finalizePhoto = this.finalizePhoto.bind(this)\n  }\n\n  launchModal = () => {\n    this.setState({ modalOpen: true })\n  }\n\n  closeModal = (e) => {\n    if(e) e.preventDefault()\n    this.setState({ modalOpen: false, uploadedHash: '' })\n  }\n\n  resetUploadedHash = (e) => {\n    if(e) e.preventDefault()    // prevent default event (if provided)\n    this.setState({ uploadedHash: '' })\n  }\n\n  finalizePhoto = (photo) => {\n    this.setState({ isLoading: true })\n    \n    ipfs(photo, (err, file) => {\n      // only update hash once.\n      console.log(\"calling........\")\n      if(!this.state.uploadedHash && this.state.modalOpen)\n        this.setState({\n          uploadedHash: file.hash,\n          isLoading: false\n        },() => {\n          // confim photo (with scatter)\n          this.confirmPhoto()\n        })\n    })\n\n  }\n\n  confirmPhoto = () => {\n    let { account, authorization, contract } = this.props\n    let { uploadedHash } = this.state // ipfs hash of photo..\n\n    contract.set({\n      account: account.name,\n      photo_hash: uploadedHash\n    },{authorization}).then((res) => {\n      console.log(\"res is\")\n      console.log(res)\n\n      if(res.broadcast === true) {\n        // successful broadcast\n        console.log(\"good bcast\")\n        // reset hash, close modal, and show toast.\n        this.resetUploadedHash();\n        this.closeModal();\n        this.props.setPhoto(uploadedHash);   // set photo from props.\n      } else {\n        // something went wrong.\n        console.log(\"bad bcast\")\n        alert(\"Unable to contact the EOS network, please try again later.\")\n      }\n    })\n    .catch((e) => {\n      // not enough resources\n      this.setState({failResources: true})\n    })\n\n  }\n\n  whatToRender = () => {\n    let { isLoading, uploadedHash, failResources } = this.state\n    let { account } = this.props\n    // render one of the following:\n    // loading bar\n    // confirmation screen (for scatter)\n    // image uploader/cropper\n\n    // loader\n    \n    if(isLoading) return (<div><h2>Storing on IPFS...</h2>\n    This may take a moment, we're currently adding your photo to multiple IPFS nodes.\n      <br /><br /><br />\n      <center>\n      <CircleLoader\n          sizeUnit={\"px\"}\n          size={250}\n          color={'#024359'}\n          loading={true}\n      />\n      </center>\n      <div className={'spacer'} />\n    </div>)\n\n    // confirmation\n    if(uploadedHash) return (<div><h2>Confirm with Scatter</h2>\n        We've opened scatter for you, please confirm your new account photo.\n        <br /><br />\n        {failResources && <div>\n          <Label basic color='red' pointing='below'>\n          PHOTO NOT SET!\n          Your account may not have enough <a href=\"https://www.myeoskit.com/tools/bandwidth/stake\" target=\"_blank\" rel=\"noopener noreferrer\">CPU or RAM</a> to complete this action.\n          </Label>\n  \n          <br /><br />\n        </div>}\n        <Button onClick={this.confirmPhoto} color='green' fluid>Re-Launch Scatter</Button>\n        <img src={ipfsUrl(uploadedHash)} alt={'pre-cache user'} style={{display:'none'}} /> \n        </div>)\n\n\n    // image upload + crop\n    return (<PhotoCropper \n      finalizePhoto={this.finalizePhoto} \n      closeModal={this.closeModal}\n      account={account} \n      />)\n  }\n\n  render() {\n    return (\n      <span>\n        <Modal size={'mini'} \n          open={this.state.modalOpen} \n          onClose={this.closeModal} \n          closeOnDimmerClick={false}>\n          <Modal.Content>\n            <div>\n              {this.whatToRender()}\n              <div className='spacer' />\n              <div className='center spacer'>\n               <a href=\"\" onClick={this.closeModal}>I've changed my mind</a>\n              </div>\n            </div>\n          </Modal.Content>\n        </Modal>\n        <Button onClick={this.launchModal} color='green'>Change Photo</Button>\n      </span>\n    );\n  }\n\n}\n\nexport default Photo;\n","import React, { Component } from 'react';\nimport { Card, Image, Icon, Button } from 'semantic-ui-react'\nimport scatter from '../services/scatter'\nimport ipfsUrl from '../services/ipfsUrl'\nimport PhotoModal from './photoModal'\nimport config from \"../config/default\";\nimport Eos from \"eosjs\";\n\n// Index component\nclass Index extends Component {\n\n  state = {\n    account: {},\n    eos: '',\n    authorization: '',\n    contract: '',\n    photo: ipfsUrl(),\n  }\n\n  constructor(props) {\n    super(props);\n    this.setPhoto = this.setPhoto.bind(this)\n  }\n\n  linkScatter = () => {\n    scatter.connect((eos, account, authorization) => {\n      // save scatter helpers\n      this.setState({ eos, account, authorization })\n      // also get/save contract.\n      eos.contract(config.network.contract)\n        .then((contract) => {\n          this.setState({ contract }, () => {\n            this.setPhoto()\n          })\n\n        });      \n    });\n  }\n\n  forgetScatter = () => {\n    this.setState({ account: {}, eos: '', authorization: '', contract: '', photo: ipfsUrl() })\n    scatter.forget()\n  }\n\n  componentWillUnmount() {\n    this.forgetScatter()\n  }\n\n  setPhoto = (hash) => {\n    // get photo from ipfs\n    let { eos, account } = this.state\n    let { network } = config\n\n    if (hash) {\n      // hash provided just use that one.\n      this.setState({ photo: ipfsUrl(hash) })\n    } else {\n      // check eos network for profile hash.\n      let encodedName = Eos.modules.format.encodeName(account.name,false).toString()\n      console.log(\"en\",encodedName)\n      eos.getTableRows({\n        json: true,\n        code: network.contract,\n        scope: network.contract,\n        table: \"photo\",\n        lower_bound: encodedName,\n      })\n        .then((res) => {\n          let photo = res.rows[0]\n          // load in hash from ipfs if correct account name was loaded\n          if(photo.account_name === encodedName) {\n            console.log(\"accountphoto found\")\n            this.setState({ photo: ipfsUrl(photo.photo_hash) })\n          } else {\n            console.log(\"no accountphoto found, fallback\")\n            this.setState({ photo: ipfsUrl() })\n          }\n        });\n    }\n\n  }\n\n  renderMain() {\n    let { account, eos, authorization, contract } = this.state\n\n    // scatter already linked\n    if (contract)\n      return (\n        <div>\n          <Card.Header><h1>{account.name}</h1></Card.Header>\n          This is how you currently appear on the EOS network.\n          <div className={'spacer'} />\n          <Button onClick={this.forgetScatter}>Unlink</Button>\n          <PhotoModal\n            account={account}\n            eos={eos}\n            authorization={authorization}\n            contract={contract}\n            setPhoto={this.setPhoto}\n          />\n        </div>\n      )\n\n\n    // need to link scatter\n    return (\n      <div>\n        Personalize your EOS account by uploading a publicly visible photo.\n        <div className={'spacer'} />\n        <Button href=\"https://namevault.co\" target=\"_blank\">No Account?</Button>\n        <Button onClick={this.linkScatter} color='blue'>Link Scatter</Button>\n      </div>\n    )\n\n  }\n\n  /* <Dropzone onDrop={this.onDrop}>hello</Dropzone> */\n  render() {\n    let { photo } = this.state\n    return (\n      <div className={'center'}>\n        <Card style={{ width: '100%', padding: '1.5em' }} color='grey'>\n          <Image src={photo} />\n          <Card.Content>\n            <Card.Description>\n              {this.renderMain()}\n            </Card.Description>\n          </Card.Content>\n          <Card.Content extra>\n            <a href=\"https://github.com/zachalam/AccountPhoto#developer-integration\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <Icon name='user' />\n              Developer? Integrate AccountPhoto.\n            </a>\n          </Card.Content>\n        </Card>\n      </div>\n    );\n  }\n\n}\n\nexport default Index;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Index from './pages/home';\n\nimport logo from './assets/logo.png'\nimport 'semantic-ui-css/semantic.min.css';\nimport './assets/index.css';\n\nReactDOM.render(\n    <div className={'container'}>\n        <div className={'center'}>  \n            <img src={logo} alt={`accountphoto logo`} />\n        </div>\n        <Index />\n    </div>, document.getElementById('root'));\n"],"sourceRoot":""}